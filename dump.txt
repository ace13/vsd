
    
recentFiles: {
  get: function() {
    var recent = this._recentFiles;

    // clean any files that may no longer exist
    var i = recent.length;
    while (i--) {
      if (!this.map[recent[i].path]) {
        recent.splice(i, 1);
      }
    }

    var entries = [];

    recent.forEach(function(item) {
      var entry = {
        file: this.map[item.path]
      };
      entries.push(utils.extend(entry, item));
    }, this);

    return entries;
  }
}



// var requiresAuthentication = new Handler({
//   name: 'requiresAuthentication',
//   code: "function(req, res, next) { next(req.query.authme ? null : new Error('Unauthorized')); }"
// });
//
// var homeRoute = new Route({
//   path: '/',
//   actions: new Action({
//     verb: 'GET',
//     handlers: new Handler({
//       name: 'getHomePage',
//       code: 'function(req, res) { req.send("getHomePage"); }'
//     })
//   })
// });
//
// homeRoute.addChild('/ping', new Action({
//   verb: 'GET',
//   handlers: new Handler({
//     name: 'getPingPage',
//     code: 'function(req, res) { req.send("pong"); }'
//   })
// }));
//
// var user = homeRoute.addChild('/user', [new Action({
//     verb: 'ALL',
//     handlers: requiresAuthentication
//   }),
//   new Action({
//     verb: 'GET',
//     handlers: new Handler({
//       name: 'getUserPage',
//       code: 'function(req, res) { req.send("getUserPage"); }'
//     })
//   })
// ]);
//
// var authUsers = new Action({
//   verb: 'ALL',
//   handlers: requiresAuthentication
// });
//
// var loadUser = new Action({
//   verb: 'ALL',
//   handlers: new Handler({
//     name: 'loadUser',
//     code: 'function(req, res, next) { req.user = { name: "fred" }; next(); }'
//   })
// });
//
// var putUser = new Action({
//   verb: 'PUT',
//   handlers: [new Handler({
//     name: 'saveUser',
//     code: 'function(req, res) { req.send("saveUser"); }'
//   })]
// });
//
// var deleteUser = new Action({
//   verb: 'DELETE',
//   handlers: new Handler({
//     name: 'deleteUser',
//     code: 'function(req, res) { req.send("deleteUser"); }'
//   })
// });
//
//
// var authenticateUsers = user.addChild('/*', [authUsers]);
//
// var userid = user.addChild('/:id', [loadUser, putUser, deleteUser]);
//
// userid.addChild('/videos');










app.controller('ApiDiagramCtrl', ['$scope', '$state', '$stateParams',
  function($scope, $state, $stateParams) {

    var m = [20, 120, 20, 120],
      w = 1280 - m[1] - m[3],
      h = 800 - m[0] - m[2],
      i = 0,
      j = 0,
      root, json;

    var tree = d3.layout.tree()
      .size([h, w]);

    var diagonal = d3.svg.diagonal()
      .projection(function(d) {
        return [d.y, d.x];
      });

    var vis = d3.select("#api-diagram").append("svg:svg")
      .attr("width", w + m[1] + m[3])
      .attr("height", h + m[0] + m[2])
      .append("svg:g")
      .attr("transform", "translate(" + m[3] + "," + m[0] + ")");


    function build(route) {

      var o = {
        name: route.path,
        url: route.url
      };

      var j;

      if (route.children.length) {
        o.children = [];
        for (j = 0; j < route.children.length; j++) {
          o.children.push(build(route.children[j]));
        }
      }

      if (route.actions.length) {
        if (!o.children) {
          o.children = [];
        }
        for (j = 0; j < route.actions.length; j++) {
          o.children.push({
            name: route.actions[j].url,
            url: route.actions[j].url
          });
        }
      }

      return o;

      //
      //
      // children.concat(controller.routes.map(function(item) {
      //   return { name: item.name };
      // }));
      //


    }
    //
    // json = {
    //   name: $scope.api.controller.name,
    //   children: [{
    //       "name": "analytics",
    //       "children": [{
    //         "name": "cluster",
    //         "children": [{
    //           "name": "AgglomerativeCluster",
    //           "size": 3938
    //         }, {
    //           "name": "CommunityStructure",
    //           "size": 3812
    //         }, {
    //           "name": "HierarchicalCluster",
    //           "size": 6714
    //         }, {
    //           "name": "MergeEdge",
    //           "size": 743
    //         }]
    //       }]
    //     }]
    //   };
    json = build($scope.api.root);


    root = json;
    root.x0 = h / 2;
    root.y0 = 0;

    function toggleAll(d) {
      if (d.children) {
        d.children.forEach(toggleAll);
        toggle(d);
      }
    }

    // Initialize the display to show a few nodes.
    //toggleAll(root);
    //root.children.forEach(toggleAll);
    //toggle(root.children[1]);
    // toggle(root.children[1].children[2]);
    // toggle(root.children[9]);
    // toggle(root.children[9].children[0]);

    update(root);



    function update(source) {
      var duration = d3.event && d3.event.altKey ? 5000 : 500;

      // Compute the new tree layout.
      var nodes = tree.nodes(root).reverse();

      // Normalize for fixed-depth.
      nodes.forEach(function(d) {
        d.y = d.depth * 180;
      });

      // Update the nodes…
      var node = vis.selectAll("g.node")
        .data(nodes, function(d) {
          return d.id || (d.id = ++i);
        });

      // Enter any new nodes at the parent's previous position.
      var nodeEnter = node.enter().append("svg:g")
        .attr("class", "node")
        .attr("transform", function(d) {
          return "translate(" + source.y0 + "," + source.x0 + ")";
        })
        .on("click", function(d) {
          toggle(d);
          update(d);
        });

      nodeEnter.append("svg:circle")
        .attr("r", 1e-6)
        .style("fill", function(d) {
          return d._children ? "lightsteelblue" : "#fff";
        });

      nodeEnter.append("svg:text")
        .attr("x", function(d) {
          return d.children || d._children ? -10 : 10;
        })
        .attr("dy", ".35em")
        .attr("text-anchor", function(d) {
          return d.children || d._children ? "end" : "start";
        })
        .text(function(d) {
          return d.name;
        })
        .style("fill-opacity", 1e-6);

        nodeEnter.append("svg:a")
          .text(function(d) {
            return d.name;
          })
          .attr("xlink:href", function(d){console.log(d);return d.url;})  // <-- reading the new "url" property
          .style("fill-opacity", 1e-6);
        // .append("svg:rect")
        //   .attr("y", 20 / 2)
        //   .attr("height", 20)
        //   .attr("width", 50)
        //   .style("fill1", '#333');

      nodeEnter.append("svg:a")
        .attr("x", function(d) {
          return d.children || d._children ? -10 : 10;
        })
        .attr("dy", ".35em")
        .attr("text-anchor", function(d) {
          return d.children || d._children ? "end" : "start";
        })
        .text(function(d) {
          return d.name;
        })
        .style("fill-opacity", 1e-6);

      // Transition nodes to their new position.
      var nodeUpdate = node.transition()
        .duration(duration)
        .attr("transform", function(d) {
          return "translate(" + d.y + "," + d.x + ")";
        });

      nodeUpdate.select("circle")
        .attr("r", 4.5)
        .style("fill", function(d) {
          return d._children ? "lightsteelblue" : "#fff";
        });

      nodeUpdate.select("text")
        .style("fill-opacity", 1);

      // Transition exiting nodes to the parent's new position.
      var nodeExit = node.exit().transition()
        .duration(duration)
        .attr("transform", function(d) {
          return "translate(" + source.y + "," + source.x + ")";
        })
        .remove();

      nodeExit.select("circle")
        .attr("r", 1e-6);

      nodeExit.select("text")
        .style("fill-opacity", 1e-6);

      // Update the links…
      var link = vis.selectAll("path.link")
        .data(tree.links(nodes), function(d) {
          return d.target.id;
        });

      // Enter any new links at the parent's previous position.
      link.enter().insert("svg:path", "g")
        .attr("class", "link")
        .attr("d", function(d) {
          var o = {
            x: source.x0,
            y: source.y0
          };
          return diagonal({
            source: o,
            target: o
          });
        })
        .transition()
        .duration(duration)
        .attr("d", diagonal);

      // Transition links to their new position.
      link.transition()
        .duration(duration)
        .attr("d", diagonal);

      // Transition exiting nodes to the parent's new position.
      link.exit().transition()
        .duration(duration)
        .attr("d", function(d) {
          var o = {
            x: source.x,
            y: source.y
          };
          return diagonal({
            source: o,
            target: o
          });
        })
        .remove();

      // Stash the old positions for transition.
      nodes.forEach(function(d) {
        d.x0 = d.x;
        d.y0 = d.y;
      });
    }

    // Toggle children.
    function toggle(d) {
      if (d.children) {
        d._children = d.children;
        d.children = null;
      } else {
        d.children = d._children;
        d._children = null;
      }
    }





  }
]);







function Route(controller, id, verb, url, description, code) {
  this.controller = controller;
  this.id = id;
  this.verb = verb;
  this.url = url;
  this.description = description;
  this.code = code;
}
Route.prototype.verbs = ['ALL', 'GET', 'POST', 'PUT', 'DELETE'];
Object.defineProperties(Route.prototype, {
  name: {
    get: function() {
      return this.verb.toUpperCase() + ' ' + this.url;
    }
  }
});

function Controller(controller, id, name, baseUrl, code) {
  this.controller = controller;
  this.id = id;
  this.name = name;
  this.baseUrl = baseUrl;
  this.code = code;
  this.routes = [];
  this.controllers = [];
  this.middleware = [];
}
Controller.prototype.addRoute = function(verb, url) {
  // var handlers = Array.prototype.slice.call(arguments).splice(2);
  // var routePipeline = new RoutePipeline(handlers);
  var route = new Route(this, utils.getuid(), verb || 'GET', url || this.basePath);
  this.routes.push(route);
  return route;
};
Controller.prototype.removeRoute = function(route) {
  var index = this.routes.indexOf(route);
  if (index !== -1) {
    this.routes.splice(index, 1);
  }
};
Controller.prototype.addController = function(name, baseUrl, code) {
  var controller = new Controller(this, utils.getuid(), name, baseUrl, code);
  this.controllers.push(controller);
  return controller;
};
Controller.prototype.removeController = function(controller) {
  var index = this.controllers.indexOf(controller);
  if (index !== -1) {
    this.controllers.splice(index, 1);
  }
};
Controller.prototype.addMiddleware = function(id, name, baseUrl, code) {
  // var middleware = new Middleware(name, handler);
  // this._middleware.push(middleware);
  // return middleware;
};
Object.defineProperties(Controller.prototype, {
  allControllers: {
    get: function() {
      var controllers = [].concat(this);
      this.controllers.forEach(function(controller) {
        Array.prototype.push.apply(controllers, controller.allControllers);
      });
      return controllers;
    }
  },
  ascendents: {
    get: function() {
      var ascendents = [], c = this;

      while (c.controller) {
        ascendents.unshift(c.controller);
        c = c.controller;
      }

      return ascendents;
    }
  },
  basePath: {
    get: function() {
      var paths = [];

      function check(c) {
        if (c) {
          paths.push(c.baseUrl || '');
          check(c.controller);
        }
        return c ? c.baseUrl : null;
      }
      check(this);

      paths.reverse();

      return path.join.apply(path, paths);
    }
  }
});
Object.defineProperties(Controller.prototype, {
  allRoutes: {
    get: function() {
      var routes = [].concat(this.routes);
      this.controllers.forEach(function(controller) {
        Array.prototype.push.apply(routes, controller.allRoutes);
      });
      return routes;
    }
  }
});

function Api(id, name, controller) {
  this.id = id;
  this.name = name;
  this.controller = controller;
  this.middleware = [];
}
Api.prototype.findController = function(id) {
  return this.controllers.find(function(controller) {
    return controller.id === id;
  });
};
Api.prototype.findRoute = function(id) {
  return this.routes.find(function(route) {
    return route.id === id;
  });
};
Object.defineProperties(Api.prototype, {
  controllers: {
    get: function() {
      return this.controller.allControllers;
    }
  }
});
Object.defineProperties(Api.prototype, {
  routes: {
    get: function() {
      return this.controller.allRoutes;
    }
  }
});

var homeCtrl = new Controller(null, utils.getuid(), 'Home');
var api = new Api(utils.getuid(), 'test', homeCtrl);

homeCtrl.addRoute('GET', '/');
homeCtrl.addRoute('GET', '/about-us');
homeCtrl.addRoute('GET', '/contact-us');
homeCtrl.addRoute('POST', '/contact-us');

var userController = homeCtrl.addController('User', '/user', " \
var express = require('express');\n \
var http = require('http');\n \
var path = require('path');\n \
var favicon = require('static-favicon');\n \
var httpLogger = require('morgan');\n \
\n \
function hello() {}");

userController.addRoute('GET', '/user/:id');
userController.addRoute('ALL', '/user/:id/*');
userController.addRoute('POST', '/user');
userController.addRoute('PUT', '/user/:id');


var userPhotosCtrl = userController.addController('User Photos', '/:id/photos');
userPhotosCtrl.addRoute('GET', '/user/:id/photos');
userPhotosCtrl.addRoute('POST', '/user/:id/photos');
userPhotosCtrl.addRoute('PUT', '/user/:id/photos/:id');


var orderController = homeCtrl.addController('Order', '/order');
orderController.addRoute('GET', '/order/:id');
orderController.addRoute('ALL', '/order/:id/*');
orderController.addRoute('POST', '/order');
orderController.addRoute('PUT', '/order/:id');











<li class="controller" ng-repeat="controller in [api.controller.controllers]">
  <a ng-click1="gotoPath(schema)">{{ schema.name }}</a>
  <div ng-repeat="keys in [schema.keys]" ng-include="'keys.html'">
  </div>
  <hr>
</li>
<ul class="api">
  <li class="route" ng-repeat="route in api.routes">
    <a ui-sref="api.route({ routeId: route.id })">{{ route.url }}</a>
  </li>
</ul>


// .state('db.path', {
//   url: '/*path',
//   controllerProvider: function($stateParams) {
//     var path = $stateParams.path.split('/');
//     var ctrlName;
//
//     if (path.length === 1) {
//       ctrlName = 'ModelCtrl';
//     } else {
//       ctrlName = (path.length === 2 ? 'Schema' : 'Key') + 'Ctrl';
//     }
//     return ctrlName;
//   },
//   templateUrl: function($stateParams) {
//     var path = $stateParams.path.split('/');
//     var tplName;
//
//     if (path.length === 1) {
//       tplName = '/html/model.html';
//     } else {
//       tplName = path.length === 2 ? '/html/schema.html' : '/html/key.html';
//     }
//     return tplName;
//   };











var utils = require('../utils');
var db = require('../models/db');
var dagre = require('dagre');

app.controller('ModelCtrl', ['$scope', '$http', '$state', '$modal', 'dialog', '$timeout', 'modelPromise',
  function($scope, $http, $state, $modal, $dialog, $timeout, modelPromise) {

    var model = Object.create(db);
    model.initialize(modelPromise.data);

    window.model = model; // todo: remove

    $scope.model = model;

    // scope data
    $scope.data = {
      isCollapsed: true
    };


    $timeout(autoLayout);


    $scope.gotoPath = function(obj) {

      var isModel = false;
      var isSchema = !obj.type;

      if (isModel) {

        $state.go('db.model', {
          //path: obj.path ? obj.path().map(function(p) { return p.name; }).join('/') : ''
          path: obj.schema ? [obj.schema.id, obj.id].join('/') : obj.id
        });

      } else if (isSchema) {

        $state.go('db.model.schema', {
          schemaId: obj.id
        });

      } else {

        $state.go('db.model.schema.key', {
          keyId: obj.id
        });

      }


    };

    var idempotentialize = function(f) {
      var previous;
      var f_idempotent = function() {
        var ret = f();
        if (angular.equals(ret, previous)) {
          ret = previous;
        }
        previous = ret;
        return ret;
      };
      return f_idempotent;
    };

    $scope.errors = idempotentialize(function() {
      return model.errors();
    });

    $scope.addSchema = function() {

      var schema = model.createSchema();
      schema.initialize({
        id: ('' + Math.random()).replace(/\D/g, ''),
        name: 'NewSchema',
        installed: true,
        keys: {
          items: [{
            'name': 'FirstKey',
            'type': 'String',
            'def': {
              'required': true
            }
          }]
        }
      });

      model.insertSchema(schema);

      $scope.gotoPath(schema);
    };

    $scope.deleteSchema = function(schema) {

      $dialog.confirm({
        title: 'Delete schema',
        message: 'Are you sure you want to delete schema [' + schema.dotPath() + ']?'
      }).then(function() {
        // if ($scope.editSchema === schema) {
        //   $scope.editSchema = null;
        // }
        schema.db.removeSchema(schema);

        // go to model root
        $scope.gotoPath(schema.db);

      });
    };

    $scope.addKey = function(keys, sibling, insertAbove) {
      var data = {
        id: utils.getuid(),
        name: 'KeyName',
        type: 'String',
        def: {}
      };

      var key;
      if (sibling) {
        var siblingIndex = sibling.keys.items.indexOf(sibling);
        var index = insertAbove ? siblingIndex : ++siblingIndex;
        key = keys.insertKey(data, index);
      } else {
        key = keys.addKey(data);
      }

      $scope.gotoPath(key);
    };

    $scope.deleteKey = function(key) {
      $dialog.confirm({
        title: 'Delete key',
        message: 'Are you sure you want to delete key [' + key.dotPath() + ']?'
      }).then(function() {

        key.keys.deleteKey(key);

        // go to key parent schema
        $scope.gotoPath(key.keys.schema);
      });
    };

    $scope.moveKeyUp = function(key) {
      var items = key.keys.items;
      var index = items.indexOf(key);
      items.move(index, --index);
    };

    $scope.moveKeyDown = function(key) {
      var items = key.keys.items;
      var index = items.indexOf(key);
      items.move(index, ++index);
    };

    $scope.setEditKey = function(key) {
      $scope.editKey = key;
      $scope.editSchema = null;
    };

    $scope.setEditSchema = function(schema) {
      $scope.editKey = null;
      $scope.editSchema = schema;
    };

    function autoLayout() {
      var g = new dagre.Digraph();
      var edges = [];
      var el;
      // $('.schema').each(function() {
      //     var $this = $(this);
      //     var id = $(this).attr('id');
      //     g.addNode(id, {
      //         label: id,
      //         width: $this.width(),
      //         height: $this.height()
      //     });
      //     $this.find('.key-header[data-ref]').each(function() {
      //         edges.push([$(this).data('ref'), id]);
      //     });
      // });

      for (var i = 0; i < model.schemas.length; i++) {
        var schema = model.schemas[i];
        var id = schema.id;
        // el = document.getElementById(id);
        // el.style.position = 'absolute';
        // var style = window.getComputedStyle(el, null);

        g.addNode(id, {
          label: id,
          // width: parseFloat(style.width),
          // height: parseFloat(style.height)
        });

        var schemaReferences = schema.schemaReferences();
        for (var j = 0; j < schemaReferences.length; j++) {
          edges.push([schemaReferences[j].keys.schema.id, id]);
        }

      }


      for (var k = 0; k < edges.length; k++) {
        g.addEdge(null, edges[k][0], edges[k][1]);
      }

      var layout = dagre.layout().nodeSep(20).edgeSep(5).rankSep(20).run(g);
      // var layout = dagre.layout().run(g);
      layout.eachNode(function(u, value) {

        // el = document.getElementById(u);
        // el.style.top = value.y + 'px';
        // el.style.left = value.x + 'px';
        // el.style.width = '200px';
        // el.style.height = '300px';
        // el.style.overflow = 'hidden';

      });
    }

  }
]);














app.controller('EditKeyCtrl', ['$scope', 'dialog',
  function($scope, $dialog) {

    var key = $scope.editKey;

    $scope.type = key.type;
    $scope.isCollapsed = true;

    $scope.$watch('editKey', function(newValue, oldValue) {
      if (newValue === oldValue) {
        return;
      }
      key = newValue;

      $scope.type = key.type;
    });

    $scope.$watch('type', function(newValue, oldValue) {
      if (newValue === oldValue || newValue === key.type) {
        return;
      }

      $dialog.confirm({
        title: 'Modify key type',
        message: 'Are you sure you want to modify key [' + key.name + ']?'
      }).then(function() {

        // redefine key type
        var type = newValue;
        var newDef = type === 'Array' ? {
          type: type,
          def: {
            oftype: 'String',
            def: {}
          }
        } : {
          type: type,
          def: {}
        };

        // redefine key def
        key.type = type;
        key.define(newDef);


      }, function() {
        $scope.type = oldValue;
      });

    });

  }
]);

app.controller('KeyCtrl', ['$scope', 'dialog',
  function($scope, $dialog) {

    var key = $scope.key;

    $scope.type = key.type;

    $scope.$watch('type', function(newValue, oldValue) {
      if (newValue === oldValue) {
        return;
      }

      $dialog.confirm({
        title: 'Modify key type',
        message: 'Are you sure you want to modify key [' + key.name + ']?'
      }).then(function() {

        // redefine key type
        var type = newValue;
        var newDef = type === 'Array' ? {
          type: type,
          def: {
            oftype: 'String',
            def: {}
          }
        } : {
          type: type,
          def: {}
        };

        // redefine key def
        key.type = type;
        key.define(newDef);

      }, function() {
        //key.type = oldValue;
      });

    });

  }

]);



  <div class="input-group-btn hide">

  <div class="btn-group">
    <button type="button" class="btn btn-default btn-x1s" ng-click="addKey(editKey.keys, editKey)" tooltip="Add key below [{{ editKey.name }}]" tooltip-placement="left" tooltip-append-to-body="true">Add key</button>
    <button type="button" class="btn btn-default btn-x1s dropdown-toggle" data-toggle="dropdown" tooltip="More actions" tooltip-placement="left" tooltip-append-to-body="true">
      <span class="caret"></span>
    </button>
    <ul class="dropdown-menu" role="menu">
      <li><a ng-click="addKey(editKey.keys, editKey)">Add key below [{{ editKey.name }}]</a></li>
      <li><a ng-click="addKey(editKey.keys, editKey, true)">Add key above [{{ editKey.name }}]</a></li>
      <li class="divider"></li>
      <li><a ng-click="deleteKey(editKey)" href="#">Delete key [{{ editKey.name }}]</a></li>
    </ul>
  </div>
  </div>




        <!-- Nested Type Children
        <div ng-if="editKey.isNestedType()" class="well">
          <h6>Children</h6>
          <ul>
            <li ng-repeat="key in editKey.def.keys.items"><a ng-click="setEditKey(key)">{{key.name}}</a></li>
          </ul>
          <button type="button" class="btn btn-default" ng-click="addKey(editKey.def.keys)">Add key</button>
        </div>-->

        <!-- Array Of Nested Type Children
        <div ng-if="editKey.isNestedTypeArray()" class="well">
          <h6>Children</h6>
          <ul>
            <li ng-repeat="key in editKey.def.def.keys.items"><a ng-click="setEditKey(key)" href="#">{{key.name}}</a></li>
          </ul>
          <button type="button" class="btn btn-default" ng-click="addKey(editKey.def.def.keys)">Add key</button>
        </div>-->














<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <title>DBUI</title>

  <!-- Global Styles -->
  <link rel="stylesheet" href="/public/css/build.css">
  <link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/font-awesome/4.1.0/css/font-awesome.min.css">

</head>

<body ng-app="app" ng-controller="AppCtrl">

<div ng-view></div>
<div ui-view></div>

<a href="#/key/id" class="btn btn-primary hide">Egg</a>

  <!-- Templates -->
  <script type="text/ng-template" id="key.html">
    <a ng-click="setEditKey(key)">{{key.name}}</a><span class="pull-right"><span ng-show="key.def.required" class="text-danger">&nbsp;*&nbsp;</span>&nbsp;{{key.typeAsString()}}</span>
    <div ng-if="key.isNested()" ng-repeat="keys in [key.isNestedTypeArray() ? key.def.def.keys : key.def.keys]" ng-include="'keys.html'">
    </div>
  </script>

  <script type="text/ng-template" id="keys.html">
    <ul>
      <li class="clearfix" ng-repeat="key in keys.items" ng-include="'key.html'" ng-controller="KeyCtrl">
      </li>
    <ul>
  </script>

  <!-- Model Toolbar -->
  <button type="button" class=" hidebtn btn-primary" ng-click="addSchema()">Add Schema</button>
  <button type="button" class=" hidebtn btn-primary" ng-disabled="errors().length">Save Model</button>

  <!-- Model Name -->
  <div class="form-group hide">
    <label for="modelname" class="col-sm-2 control-label">Model Name</label>
    <div class="col-sm-10">
      <input type="text" id="modelname" ng-model="model.name" class="form-control" required />
    </div>
  </div>

  <!-- Validation Errors -->
  <div ng-if="errors().length">
    <ul>
      <li ng-repeat="err in errors()">
        {{err.message}}
      </li>
    </ul>
  </div>

  <div class="row hide">

    <!-- Schema Panels -->
    <div class="col-md-6">

      <div id="{{ schema.id }}" ng-repeat="schema in model.schemas" class="panel panel-primary">
        <div class="panel-heading">
          <div class="panel-title">
            <a href="#" ng-click="setEditSchema(schema)">{{schema.name}}</a>
          </div>
        </div>
        <div class="panel-body" ng-repeat="keys in [schema.keys]" ng-include="'keys.html'">
        </div>
      </div>

    </div>

    <!-- Edit Schema Panel -->
    <div ng-if="editSchema" class="col-md-6">
      <div class="editor">

        <div class="panel panel-default">

          <div class="panel-heading">
            <!-- Breadcrumb -->
            <div class="panel-title">
              <ol class="breadcrumb">
                <li ng-repeat="path in editSchema.path().slice(1)" ng-class="{ active: $last }">
                  <span ng-if="$first || $last">{{path.name}}</span>
                  <a style="c1olor: inherit;" ng-if="!($first || $last)" ng-click="setEditKey(path)" href="#">{{path.name}}</a>
                </li>
              </ol>
            </div>
          </div>


          <div class="panel-body">
            <!-- Schema Form -->
            <form class="form-horizontal">

              <div class="form-group">
                <label for="name" class="col-sm-2 control-label">Name</label>
                <div class="col-sm-10">
                  <input type="text" name="name" ng-model="editSchema.name" class="form-control input-sm" />
                </div>
              </div>

              <div class="form-group">
                <div class="col-sm-offset-2 col-sm-10">
                  <div class="checkbox">
                    <label>
                      <input type="checkbox" negate ng-model="editSchema.installed" ng-disabled="editSchema.isSchemaReferenced()" />Child Schema
                    </label>
                  </div>
                </div>
              </div>

              <!-- Schema Children -->
              <div class="form-group">
                <label class="col-sm-2 control-label">Children</label>
                <div class="col-sm-10">
                  <ul class="nested-keys">
                    <li ng-repeat="key in editSchema.keys.items"><a ng-click="setEditKey(key)">{{key.name}}</a>
                    </li>
                  </ul>
                  <button type="button" class="btn btn-default btn-xs" ng-click="addKey(editSchema.keys)">Add child key</button>
                </div>
              </div>

              <hr>

              <div ng-if="editSchema.isSchemaReferenced()">
                <!-- References -->
                <h6>References</h6>
                <ul class="list-inline small">
                  <li ng-repeat="key in editSchema.schemaReferences()"><a ng-click="setEditKey(key)" class="text-muted">{{key.name}}</a>
                  </li>
                </ul>
                <hr>
              </div>

              <div class="clearfix">

                <button type="button" class="btn btn-danger btn-xs pull-right" tooltip="Schema [{{editSchema.name}}] cannot be deleted. First remove all references." tooltip-placement="top" ng-click="deleteSchema(editSchema)" ng-disabled="model.isSchemaReferenced(editSchema)">
                  <i class="fa fa-trash"></i> Delete Schema
                </button>
              </div>

              <div class="alert alert-info" ng-if="editSchema.isSchemaReferenced()">
                <small>Schema [{{editSchema.name}}] cannot be deleted. To Delete this schema, first remove all keys that reference it.</small>
              </div>

            </form>
          </div>
        </div>
      </div>

    </div>

    <!-- Edit Key Panel -->
    <div ng-if="editKey" class="col-md-6" ng-controller="EditKeyCtrl">
      <div class="editor">

        <div class="panel panel-default">
          <div class="panel-heading">
            <div class="panel-title">
              <ol class="breadcrumb">
                <li ng-repeat="path in editKey.path().slice(1)" ng-class="{ active: $last }">
                  <span ng-if="$last">{{path.name}}</span>
                  <a ng-if="$first" ng-click="setEditSchema(path)" href="#">{{path.name}}</a>
                  <a ng-if="!($first || $last)" ng-click="setEditKey(path)" href="#">{{path.name}}</a>
                </li>
              </ol>
            </div>
          </div>
          <div class="panel-body">



            <!-- Key Editor Form -->
            <form class="form-horizontal">


              <div class="form-group">
                <label for="name" class="col-sm-2 control-label">Name</label>
                <div class="col-sm-10">
                  <div class="input-group">
                    <input type="text" id="name" ng-model="editKey.name" class="form-control" required />

                    <!-- Key Actions Button Group -->
                    <div class="input-group-btn">
                      <button type="button" class="btn btn-default btn-x1s" ng-click="moveKeyUp(editKey)" tooltip="Move key [{{editKey.name}}] up" tooltip-placement="top" tooltip-append-to-body="true"><i class="fa fa-arrow-up"></i>
                      </button>
                      <button type="button" class="btn btn-default btn-x1s" ng-click="moveKeyDown(editKey)" tooltip="Move key [{{editKey.name}}] down" tooltip-placement="top" tooltip-append-to-body="true"><i class="fa fa-arrow-down"></i>
                      </button>
                      <button type="button" class="btn btn-default btn-x1s" ng-click="addKey(editKey.keys, editKey)" tooltip="Add key below [{{ editKey.name }}]" tooltip-placement="left" tooltip-append-to-body="true"><i class="fa fa-plus"></i>
                      </button>
                      <button type="button" class="btn btn-default btn-x1s dropdown-toggle" data-toggle="dropdown" tooltip="More actions" tooltip-placement="left" tooltip-append-to-body="true">
                        <span class="caret"></span>
                      </button>
                      <ul class="dropdown-menu pull-right" role="menu">
                        <li><a ng-click="addKey(editKey.keys, editKey)">Add key below [{{ editKey.name }}]</a>
                        </li>
                        <li><a ng-click="addKey(editKey.keys, editKey, true)">Add key above [{{ editKey.name }}]</a>
                        </li>
                        <li class="divider"></li>
                        <li><a ng-click="deleteKey(editKey)" href="#">Delete key [{{ editKey.name }}]</a>
                        </li>
                      </ul>
                    </div>
                  </div>

                </div>
              </div>

              <div class="form-group">
                <label for="description" class="col-sm-2 control-label">Description</label>
                <div class="col-sm-10">
                  <textarea id="description" ng-model="editKey.description" class="form-control input-sm"></textarea>
                </div>
              </div>

              <div class="clearfix">
                <a href="#" ng-click="isCollapsed = !isCollapsed" class="pull-right">{{ isCollapsed ? 'more' : 'less'  }}</a>
              </div>

              <div ng-show="!isCollapsed">
                <hr>
                <div class="form-group">
                  <label for="type" class="col-sm-2 control-label">Type</label>
                  <div class="col-sm-10">
                    <select id="type" ng-model="type" ng-options="type for type in model.staticTypes" class="form-control input-sm">
                    </select>
                  </div>
                </div>

                <div ng-repeat="def in [editKey.def]" ng-include="'/public/html/keys/' + editKey.type.toLowerCase() + '.html'"></div>

              </div>
            </form>

          </div>
          <div class="panel-footer">

            <!-- Siblings -->
            <h6>Siblings</h6>
            <ul class="list-inline small">
              <li ng-repeat="key in editKey.siblings()"><a ng-click="setEditKey(key)" class="text-muted">{{key.name}}</a>
              </li>
            </ul>

          </div>
        </div>


      </div>
    </div>

  </div>

  <script src="//cdnjs.cloudflare.com/ajax/libs/underscore.js/1.6.0/underscore-min.js"></script>
  <script src="//ajax.googleapis.com/ajax/libs/angularjs/1.2.21/angular.min.js"></script>
  <script src="//ajax.googleapis.com/ajax/libs/angularjs/1.2.21/angular-route.min.js"></script>
  <script src="//cdnjs.cloudflare.com/ajax/libs/angular-ui-router/0.2.10/angular-ui-router.min.js"></script>
  <script src="//cdnjs.cloudflare.com/ajax/libs/angular-ui-bootstrap/0.10.0/ui-bootstrap.min.js"></script>
  <script src="//cdnjs.cloudflare.com/ajax/libs/angular-ui-bootstrap/0.10.0/ui-bootstrap-tpls.min.js"></script>

  <script src="/public/js/build.js"></script>

</body>

</html>
















$scope.gotoModel = function(schema) {
  $state.go('model');
};

$scope.gotoSchema = function(schema) {
  $state.go('model.path', {
    path: schema.name
  });
};

$scope.gotoKey = function(key) {
  var path = key.slashPath();
  path = path.substr(path.indexOf('/') + 1);
  $state.go('model.path', {
    path: path
  });
};

var idempotentialize = function(f) {
  var previous;
  var f_idempotent = function() {
    var ret = f();
    if (angular.equals(ret, previous)) {
      ret = previous;
    }
    previous = ret;
    return ret;
  };
  return f_idempotent;
};

$scope.errors = idempotentialize(function() {
  return model.errors();
});

$scope.addSchema = function() {

  var schema = model.createSchema();
  schema.initialize({
    id: ('' + Math.random()).replace(/\D/g, ''),
    name: '<New Name>',
    installed: true,
    keys: {
      items: [{
        'name': '<New Name>',
        'type': 'String',
        'def': {
          'required': true
        }
      }]
    }
  });


  model.insertSchema(schema);
};

$scope.deleteSchema = function(schema) {

  $dialog.confirm({
    title: 'Delete schema',
    message: 'Are you sure you want to delete schema [' + schema.dotPath() + ']?'
  }).then(function() {
    if ($scope.editSchema === schema) {
      $scope.editSchema = null;
    }
    schema.db.removeSchema(schema);
  });
};

$scope.addKey = function(keys, sibling, insertAbove) {
  var data = {
    name: '<New Name>',
    type: 'String',
    def: {}
  };

  var newkey;
  if (sibling) {
    var siblingIndex = sibling.keys.items.indexOf(sibling);
    var index = insertAbove ? siblingIndex : ++siblingIndex;
    newkey = keys.insertKey(data, index);
  } else {
    newkey = keys.addKey(data);
  }

  $scope.gotoKey(newkey);
};

$scope.deleteKey = function(key) {
  $dialog.confirm({
    title: 'Delete key',
    message: 'Are you sure you want to delete key [' + key.dotPath() + ']?'
  }).then(function() {
    // if ($scope.editKey === key) {
    //   $scope.editKey = null;
    // }
    key.keys.deleteKey(key);
  });
};

$scope.moveKeyUp = function(key) {
  var items = key.keys.items;
  var index = items.indexOf(key);
  items.move(index, --index);
};

$scope.moveKeyDown = function(key) {
  var items = key.keys.items;
  var index = items.indexOf(key);
  items.move(index, ++index);
};

$scope.setEditKey = function(key) {
  $scope.editKey = key;
  $scope.editSchema = null;
};

$scope.setEditSchema = function(schema) {
  $scope.editKey = null;
  $scope.editSchema = schema;
};

function autoLayout() {
  var g = new dagre.Digraph();
  var edges = [];
  var el;
  // $('.schema').each(function() {
  //     var $this = $(this);
  //     var id = $(this).attr('id');
  //     g.addNode(id, {
  //         label: id,
  //         width: $this.width(),
  //         height: $this.height()
  //     });
  //     $this.find('.key-header[data-ref]').each(function() {
  //         edges.push([$(this).data('ref'), id]);
  //     });
  // });

  for (var i = 0; i < model.schemas.length; i++) {
    var schema = model.schemas[i];
    var id = schema.id;
    el = document.getElementById(id);
    el.style.position = 'absolute';
    var style = window.getComputedStyle(el, null);

    g.addNode(id, {
      label: id,
      width: parseFloat(style.width),
      height: parseFloat(style.height)
    });

    var schemaReferences = schema.schemaReferences();
    for (var j = 0; j < schemaReferences.length; j++) {
      edges.push([schemaReferences[j].keys.schema.id, id]);
    }

  }


  for (var k = 0; k < edges.length; k++) {
    g.addEdge(null, edges[k][0], edges[k][1]);
  }

  var layout = dagre.layout().nodeSep(20).edgeSep(5).rankSep(20).run(g);
  // var layout = dagre.layout().run(g);
  layout.eachNode(function(u, value) {

    el = document.getElementById(u);
    el.style.top = value.y + 'px';
    el.style.left = value.x + 'px';
    // el.style.width = '200px';
    // el.style.height = '300px';
    // el.style.overflow = 'hidden';

  });
}
